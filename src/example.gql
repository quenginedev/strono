scalar MongoID scalar MongoInputID


input PetWithoutUserInput {
    connect : UserPetConnectInput
    create : UserPetCreateInput
}




type User {
    _id: MongoID email: String
    phoneNumber: String
    name: String
    age: Int
    pets: [Pet]!

}

input UserDataInput{
    email: String!
    phoneNumber: String!
    name: String!
    age: Int
    pets: [PetWithoutUserInput]!

}

input UserWhereInput{
    _id: MongoID email: String
    phoneNumber: String
    name: String
    age: Int
    pets: PetWhereInput

}

input UserWhereUniqueInput{
    _id: MongoID
    email: String

}




input UserPetConnectInput{
    _id: MongoID
    email: String

}

input UserPetCreateInput{
    email: String!
    phoneNumber: String!
    name: String!
    age: Int
    pets: [PetWithoutUserInput]!

}



input UserWithoutPetInput {
    connect : PetUserConnectInput
    create : PetUserCreateInput
}




type Pet {
    _id: MongoID name: String
    age: Int
    user: User

}

input PetDataInput{
    name: String!
    age: Int
    user: UserWithoutPetInput

}

input PetWhereInput{
    _id: MongoID name: String
    age: Int
    user: UserWhereInput

}

input PetWhereUniqueInput{
    _id: MongoID
}




input PetUserConnectInput{
    _id: MongoID
}

input PetUserCreateInput{
    name: String!
    age: Int
    user: UserWithoutPetInput

}



input UserWithoutHomeInput {
    connect : HomeUserConnectInput
    create : HomeUserCreateInput
}


input PetWithoutHomeInput {
    connect : HomePetConnectInput
    create : HomePetCreateInput
}




type Home {
    _id: MongoID address: String
    office_box: String
    user: User
    pets: [Pet]!

}

input HomeDataInput{
    address: String
    office_box: String!
    user: UserWithoutHomeInput!
    pets: [PetWithoutHomeInput]!

}

input HomeWhereInput{
    _id: MongoID address: String
    office_box: String
    user: UserWhereInput
    pets: PetWhereInput

}

input HomeWhereUniqueInput{
    _id: MongoID
    office_box: String

}




input HomeUserConnectInput{
    _id: MongoID
    office_box: String

}

input HomeUserCreateInput{
    address: String
    office_box: String!
    user: UserWithoutHomeInput!
    pets: [PetWithoutHomeInput]!

}




input HomePetConnectInput{
    _id: MongoID
    office_box: String

}

input HomePetCreateInput{
    address: String
    office_box: String!
    user: UserWithoutHomeInput!
    pets: [PetWithoutHomeInput]!

}




type Query {

    user (where: UserWhereUniqueInput!) :User
    userMany (where: UserWhereInput) : [User]

    pet (where: PetWhereUniqueInput!) :Pet
    petMany (where: PetWhereInput) : [Pet]

    home (where: HomeWhereUniqueInput!) :Home
    homeMany (where: HomeWhereInput) : [Home]

}

type Mutation {

    createUser (data: UserDataInput!): User

    createPet (data: PetDataInput!): Pet

    createHome (data: HomeDataInput!): Home

}

